ft2$fit.boot
ft2=extGP.fit(y[y>0], c(.5,.5,.5), .2,.2,bootstrap = F)
library(tcG)
load("~/these/2-tcG/pluvios_merge.RData")
load("~/these/2-tcG/pluvios_merge.RData")
library(lubridate)
y=Hall$`coat ar gueven`[month(Hall$date)==11]
ft=tcG.fit(y, "pe2", list("pe2"=c(-1,.5,.5,.5)), .2,.2,bootstrap = F)
ft2=extGP.fit(y[y>0], c(.5,.5,.5), .2,.2,bootstrap = F)
res.plot(ft, ft2, y, .2, .2, choice="qqplot")
load("~/these/2-tcG/pluvios_merge.RData")
library(tcG)
load("~/these/2-tcG/pluvios_merge.RData")
library(lubridate)
y=Hall$`coat ar gueven`[month(Hall$date)==11]
ft=tcG.fit(y, "pe2", list("pe2"=c(-1,.5,.5,.5)), .2,.2,bootstrap = F)
ft2=extGP.fit(y[y>0], c(.5,.5,.5), .2,.2,bootstrap = F)
res.plot(ft, ft2, y, .2, .2, choice="qqplot")
ft2$fit.boot
ft2$par
res.plot(NULL, ft2, y, .2, .2, choice="dens")
source('~/these/tcG/R/plot_res.R')
res.plot(NULL, ft2, y, .2, .2, choice="dens")
ft2=extGP.fit(y[y>0], c(.5,.5,.5), .2,.2,bootstrap = F)
library(tcG)
load("~/these/2-tcG/pluvios_merge.RData")
library(lubridate)
y=Hall$`coat ar gueven`[month(Hall$date)==11]
ft2=extGP.fit(y[y>0], c(.5,.5,.5), .2,.2,bootstrap = F)
dtcG
dextGP
library(tcG)
ft2=extGP.fit(y[y>0], c(.5,.5,.5), .2,.2,bootstrap = F)
ft=tcG.fit(y, "pe2", list("pe2"=c(-1,.5,.5,.5)), .2,.2,bootstrap = F)
res.plot(ft, ft2, y, .2, .2, choice="qqplot")
res.plot(ft, ft2, y, .2, .2)
res.plot(NULL, ft2, y, .2, .2, choice="dens")
?tcG.fit
data(rain, package = "ismev")
tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(-1,0.5,0.5), "pe2"=c(-1,0.5,0.5,0.5)),
ym=0.3, step=0.1, R=100)
ft=tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(-1.5,0.3,1.8), "pe2"=c(-1,0.5,0.5,0.5)),
ym=0.3, step=0.1, R=10)
ft=tcG.fit(rain, name=c("power"),
init=list("power"=c(-1.5,0.3,1.8), "pe2"=c(-1,0.5,0.5,0.5)),
ym=0.3, step=0.1, R=10)
ft$par
ft=tcG.fit(rain, name=c("power"),
init=list("power"=c(-1,0.3,1.8), "pe2"=c(-1,0.5,0.5,0.5)),
ym=0.3, step=0.1, R=10)
ft$par
hist(rain)
ft=tcG.fit(rain, name=c("power"),
init=list("power"=c(0,0.3,1.8), "pe2"=c(-1,0.5,0.5,0.5)),
ym=0.3, step=0.1, R=10)
ft=tcG.fit(rain, name=c("power"),
init=list("power"=c(0,1,1.8), "pe2"=c(-1,0.5,0.5,0.5)),
ym=0.3, step=0.1, R=10)
ft$par
ft=tcG.fit(rain, name=c("power"),
init=list("power"=c(0,2,2), "pe2"=c(-1,0.5,0.5,0.5)),
ym=0.3, step=0.1, R=10)
ft$par
ft=tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(0,2,2), "pe2"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=10)
res.plot(ft, NULL, rain, zoom = c(0,100))
ft$AIC
library(tcG)
res.plot(ft, NULL, rain, zoom = c(0,100))
res.plot(ft, NULL, rain, zoom = c(0,20))
res.plot(ft, NULL, rain, .2,.2, zoom = c(0,100), )
res.plot(ft, NULL, rain, .2,.2, zoom = c(0,20))
res.plot(ft, NULL, rain, .2,.2, zoom = c(0,10))
res.plot(ft, NULL, rain, .2,.2, zoom = c(0,5))
res.plot(ft, NULL, rain, .2,.2, zoom = c(0,2))
ft$par
ft=tcG.fit(y, "pe2", list("pe2"=c(-1,.5,.5,.5)), .2,.2,bootstrap = F)
ft=tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(0,2,2), "pe2"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=10)
res.plot(ft, NULL, rain, .2,.2, zoom = c(0,2))
res.plot(ft, NULL, rain, .2,.2)
rain
which.min(res.tcG$AIC)
which.min(ft$AIC)
library(tcG)
data(rain, package = "ismev")
ft=tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(0,2,2), "pe2"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=10)
res.plot(ft, NULL, rain, .2,.2)
cols = cbind(c(rgb(0,0,1), rgb(1,0,0), rgb(0,1,0), rgb(1,0,1), rgb(.6,.3,0)),
c(rgb(0,0,1,0.5), rgb(1,0,0,0.5), rgb(0,1,0,0.5), rgb(1,0,1,0.5), rgb(.6,.3,0,.5)),
c(rgb(0,0,1,0.1), rgb(1,0,0,0.1), rgb(0,1,0,0.1), rgb(1,0,1,0.1), rgb(.6,.3,0,.1)))
res.tcG=ft
res.extGP=NULL
y=rain
ym=step=.2
zoom=range(y,na.rm=TRUE)
select=NULL
choice=c("dens","qqplot")
legend=TRUE
y=y[!is.na(y)]
if (!is.null(select)) names=select else names=names(res.tcG$par)
p=c(1:length(y))/(length(y) + 1)
x=seq(ym, max(y, na.rm = TRUE), by = 0.05)
cols = cbind(c(rgb(0,0,1), rgb(1,0,0), rgb(0,1,0), rgb(1,0,1), rgb(.6,.3,0)),
c(rgb(0,0,1,0.5), rgb(1,0,0,0.5), rgb(0,1,0,0.5), rgb(1,0,1,0.5), rgb(.6,.3,0,.5)),
c(rgb(0,0,1,0.1), rgb(1,0,0,0.1), rgb(0,1,0,0.1), rgb(1,0,1,0.1), rgb(.6,.3,0,.1)))
par(mfrow=c(1,length(choice)))
if ("dens" %in% choice){
if (!is.null(res.tcG)){w=which.min(res.tcG$AIC);nm=names[w]}
if (step==0){ # histogram
if (any(zoom!=range(y,na.rm=T))){
m=max(zoom[1], min(y[y>0]))
y2=y[y>=m & y<=zoom[2]]
if (round(m,2)==0){p="]"}else{p='['}
if (!is.null(res.tcG)){
cst=ptcG(zoom[2],res.tcG$par[[nm]],nm,ym,step)-ptcG(m,res.tcG$par[[nm]],nm,ym,step)
}else{cst=pextGP(zoom[2],res.extGP$par,ym)-pextGP(m,res.extGP$par,ym)}
if (!hasArg(main)) main=bquote("Density of y" %in% .(paste(p,round(m,2),",",round(zoom[2],2),"]",sep="")))
}else{
y2=y
if (!is.null(res.tcG)){cst=1-pnorm(-res.tcG$par[[nm]][1])}else{cst=1}
if (!hasArg(main)) main="Density of y>0"
}
if (!hasArg(main)){hist(y2[y2>0], breaks=c(0:30)*max(y2+.1)/30, freq=FALSE, xlim=zoom,
xlab="Precipitation [mm]", ylab="Density", col="lightgrey",main=main,cex.main=1)
}else{hist(y2[y2>0], breaks=c(0:30)*max(y2+.1)/30, freq=FALSE, xlim=zoom,
xlab="Precipitation [mm]", ylab="Density", col="lightgrey",cex.main=1,...)}
if (!is.null(res.tcG)){lines(x, res.tcG$for.plots$dfit[[w]]/cst, col=cols[w,1])
}else{lines(x, res.extGP$for.plots$dfit/cst, col=cols[5,1])}
if (legend) legend("topright", paste("Best AIC tcG model:",nm), text.col=cols[w,1], bty="n")
}else{ # barplot
if (!is.null(res.tcG)){tcG.barplot(y,theta=res.tcG$par[[nm]],name=nm,ym=ym,step=step,zoom=zoom,cols=c(rgb(0,0,0),cols[w,2]), legend=legend, ...)
}else{extGP.barplot(y[y>0],theta=res.extGP$par,ym=ym,step=step,c(1,cols[5,2]),zoom=zoom, legend=legend,...)}
}
}
if ("dens" %in% choice){
if (!is.null(res.tcG)){w=which.min(res.tcG$AIC);nm=names[w]}
if (step==0){ # histogram
if (any(zoom!=range(y,na.rm=T))){
m=max(zoom[1], min(y[y>0]))
y2=y[y>=m & y<=zoom[2]]
if (round(m,2)==0){p="]"}else{p='['}
if (!is.null(res.tcG)){
cst=ptcG(zoom[2],res.tcG$par[[nm]],nm,ym,step)-ptcG(m,res.tcG$par[[nm]],nm,ym,step)
}else{cst=pextGP(zoom[2],res.extGP$par,ym)-pextGP(m,res.extGP$par,ym)}
if (!hasArg(main)) main=bquote("Density of y" %in% .(paste(p,round(m,2),",",round(zoom[2],2),"]",sep="")))
}else{
y2=y
if (!is.null(res.tcG)){cst=1-pnorm(-res.tcG$par[[nm]][1])}else{cst=1}
if (!hasArg(main)) main="Density of y>0"
}
if (!hasArg(main)){hist(y2[y2>0], breaks=c(0:30)*max(y2+.1)/30, freq=FALSE, xlim=zoom,
xlab="Precipitation [mm]", ylab="Density", col="lightgrey",main=main,cex.main=1)
}else{hist(y2[y2>0], breaks=c(0:30)*max(y2+.1)/30, freq=FALSE, xlim=zoom,
xlab="Precipitation [mm]", ylab="Density", col="lightgrey",cex.main=1,...)}
if (!is.null(res.tcG)){lines(x, res.tcG$for.plots$dfit[[w]]/cst, col=cols[w,1])
}else{lines(x, res.extGP$for.plots$dfit/cst, col=cols[5,1])}
if (legend) legend("topright", paste("Best AIC tcG model:",nm), text.col=cols[w,1], bty="n")
}else{ # barplot
if (!is.null(res.tcG)){tcG.barplot(y,theta=res.tcG$par[[nm]],name=nm,ym=ym,step=step,zoom=zoom,cols=c(rgb(0,0,0),cols[w,2]), legend=legend)
}else{extGP.barplot(y[y>0],theta=res.extGP$par,ym=ym,step=step,c(1,cols[5,2]),zoom=zoom, legend=legend,...)}
}
}
if (!is.null(res.tcG)){w=which.min(res.tcG$AIC);nm=names[w]}
w
nm
!is.null(res.tcG)
tcG.barplot(y,theta=res.tcG$par[[nm]],name=nm,ym=ym,step=step,zoom=zoom,cols=c(rgb(0,0,0),cols[w,2]), legend=legend
)
res.tcG$par[[nm]]
theta=res.tcG$par[[nm]]
name=nm
ym0=min(y[y>0]) # ym=ym0 si fixe,  ym=param optimisé sinon
tab=seq(ym0-step/2,max(y)+step/2,by=step)
pemp=table(cut(y,tab))/length(y)
tab2=round(seq(ym0,max(y),by=step),10)
pth=dtcG(tab2,theta=theta, name=name,ym=ym, step=step)
p=rbind(pemp,pth)
colnames(p)=tab2
if (all(zoom==range(y))){w=1:min(20,ncol(p))}else{w=which(tab2<=zoom[2] & tab2>=zoom[1])}
barplot(p[,w],beside=TRUE, main=main, col=cols,ylab="p(Y=y)",xlab="y", cex.main=1)
cols=c(rgb(0,0,0),cols[w,2])
cols
w
y=y[!is.na(y)]
if (!is.null(select)) names=select else names=names(res.tcG$par)
p=c(1:length(y))/(length(y) + 1)
x=seq(ym, max(y, na.rm = TRUE), by = 0.05)
cols = cbind(c(rgb(0,0,1), rgb(1,0,0), rgb(0,1,0), rgb(1,0,1), rgb(.6,.3,0)),
c(rgb(0,0,1,0.5), rgb(1,0,0,0.5), rgb(0,1,0,0.5), rgb(1,0,1,0.5), rgb(.6,.3,0,.5)),
c(rgb(0,0,1,0.1), rgb(1,0,0,0.1), rgb(0,1,0,0.1), rgb(1,0,1,0.1), rgb(.6,.3,0,.1)))
par(mfrow=c(1,length(choice)))
if (!is.null(res.tcG)){w=which.min(res.tcG$AIC);nm=names[w]}
cols=c(rgb(0,0,0),cols[w,2])
cols
ym0=min(y[y>0]) # ym=ym0 si fixe,  ym=param optimisé sinon
tab=seq(ym0-step/2,max(y)+step/2,by=step)
pemp=table(cut(y,tab))/length(y)
tab2=round(seq(ym0,max(y),by=step),10)
pth=dtcG(tab2,theta=theta, name=name,ym=ym, step=step)
p=rbind(pemp,pth)
colnames(p)=tab2
if (all(zoom==range(y))){w=1:min(20,ncol(p))}else{w=which(tab2<=zoom[2] & tab2>=zoom[1])}
barplot(p[,w],beside=TRUE, main=main, col=cols,ylab="p(Y=y)",xlab="y", cex.main=1)
p
tab2
step
res.plot(ft, NULL, rain, .3,.1)
data(rain, package = "ismev")
ft=tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(0,2,2), "pe2"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=10)
res.plot(ft, NULL, rain, .3,.1, zoom=c(0,100))
res.plot(ft, NULL, rain, .3,.1, zoom=c(0,20))
res.plot(ft, NULL, rain, .3,.1, zoom=c(0,10))
res.plot(ft, NULL, rain, .3,.1, zoom=c(0,2))
res.plot(ft, NULL, rain, .3,.1, zoom=c(0,5))
res.plot(ft, NULL, rain, .3,.1, zoom=c(0,3))
res.plot(ft, NULL, rain, zoom=c(0,3))
res.plot(ft, NULL, rain)
res.plot(ft, NULL, rain, zoom=c(1,20))
?rain
?ismev::rain
library(tcG)
?res.plot
data(rain, package = "ismev")
res=fit.tcG(rain, name=c("power", "pe2"),
init=list("power"=c(0,2,2), "pe2"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=50, plots=FALSE)
res=tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(0,2,2), "pe2"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=50, plots=FALSE)
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,30), choice="qqplot")
res2=extGP.fit(rain[rain>0], c(2,.5,.5), ym=.3, step=.1, R=50, plots=FALSE)
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2")
source('~/these/tcG/R/plot_res.R')
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2")
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2", choice="qqplot")
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,30), choice="qqplot")
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,30), choice="dens")
names=names(res$par)
res.tcG$AIC[[names]]
res$AIC[[names]]
res$AIC
names
res$AIC[[list(names)]]
list(names)
res$AIC[[list("pe2", "power")]]
res$AIC[[names]]
which(names(AIC)%in% names)
which(names(res$AIC)%in% names)
source('~/these/tcG/R/plot_res.R')
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2", choice="qqplot")
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2", choice="dens")
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,30), choice="dens")
source('~/these/tcG/R/plot_res.R')
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,30), choice="dens")
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2", choice="dens")
names(res$par)
names=names(res$par)
which(names(res$AIC)%in% names)
res.tcG$AIC[[which(names(res$AIC)%in% names)]]
res$AIC[[which(names(res$AIC)%in% names)]]
res$AIC[c("pe2", "power")]
res$AIC[c("pe2")]
res$AIC[[c("pe2")]]
res$AIC[[c("pe2", "power")]]
res$AIC[NULL]
source('~/these/tcG/R/plot_res.R')
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,30), choice="dens")
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,2), choice="dens")
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2", choice="dens")
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,2), choice="qqplot")
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2", choice="qqplot")
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,2))
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2", choice="qqplot")
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2")
source('~/these/tcG/R/plot_res.R')
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2")
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,2))
library(tcG)
?tcG.fit
data(rain, package = "ismev")
# The histogram is not very revelant due to the fact \code{rain} are daily observations
ft=tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(0,2,2), "pe2"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=50)
?extGP.fit
?res.plot
data(rain, package = "ismev")
res=tcG.fit(rain, name=c("power", "pe2"),
init=list("power"=c(0,2,2), "pe2"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=50, plots=FALSE)
res.plot(res.tcG=res, y=rain, ym=.3, step=.1, zoom=c(0,30), choice="qqplot")
res2=extGP.fit(rain[rain>0], c(2,.5,.5), ym=.3, step=.1, R=50, plots=FALSE)
res.plot(res.tcG=res, res.extGP=res2, y=rain, ym=.3, step=.1, select="pe2", choice="qqplot")
extGP.fit(rain[rain>0], c(2,.5,.5), ym=.3, step=.1, R=50)
var(rain[rain>0])
sq(rain[rain>0])
sd(rain[rain>0])
?tcG.barplot
?tcG.qqplot
?extGP.qqplot
?extGP.barplot
?tcG
??tcG
theta=c(-1,0.2,0.9,0.1)
s=seq(0,2,0.01)
sim = rtcG(1e4, theta, "pe2")
d = dtcG(s, theta, "pe2")
hist(sim, probability=TRUE)
lines(s, d, col=2)
psi(c(-1,.2,.6,.1), 0.87, name='pe2')
psi1(c(-1,.2,.6), 0.1, name='power')
ll.choice(TRUE, "pe2")
ll.choice(TRUE, "power")
library(tcG)
library(tcG)
?tcG.fit
?tcG.fit
library(tcG)
library(tcG)
?tcG.fit
tcG.fit = function(y, name, init, ym=0, step=0, plots=TRUE, bootstrap=TRUE, R=500,
filename=NULL, ncpus=parallel::detectCores(), ym.param=FALSE){
y=y[!is.na(y)]
p=c(1:length(y))/(length(y) + 1)
x=seq(0, max(y, na.rm = TRUE), by = 0.05)
k=list("power"=3,"power-exp"=4,"quadratic-power"=4,"gp"=4)
if (ym.param) lapply(k,function(x) x=x+1)
AIC=par=fit.boot=q.L=q.U=qfit=dfit=list()
for (nm in name){
ll=ll.choice(step!=0,nm)
print(nm)
if (!ym.param){opt=optim(init[[nm]], fn=ll, y=y,ym=ym, step=step, name=nm)}else{
opt=optim(init[[nm]], fn=ll, y=y, step=step, name=nm)
ym=opt$par[k[[nm]]]}
par[[nm]] = opt$par
AIC[[nm]] = 2*opt$value + 2*k[[nm]]
if (bootstrap){
if (!ym.param){
fit.boot[[nm]] = boot(data = y,function(data, original,ym, step, name, par){
optim(par,fn=ll,y=data[original],ym=ym,step=step,name=name,control=list(maxit=2000))$par
}, R=R, parallel="multicore",ncpus=ncpus,ym=ym, step=step, name=nm, par=par[[nm]])
}else{
fit.boot[[nm]] = boot(data = y,function(data, original, step, name, par){
optim(par,fn=ll,y=data[original],step=step,name=name,control=list(maxit=2000))$par
}, R=R, parallel="multicore",ncpus=ncpus, step=step, name=nm, par=par[[nm]])
}
q.boot = mapply(FUN=qtcG, p=list(c(1:length(y))/(length(y) + 1)),name=nm,ym=ym, step=step,
theta=split(t(fit.boot[[nm]]$t),rep(1:R, each=k[[nm]])))
q.L[[nm]] = apply(q.boot,1,quantile,0.025,na.rm=TRUE)
q.U[[nm]] = apply(q.boot,1,quantile,0.975,na.rm=TRUE)
fit.boot[[nm]] = fit.boot[[nm]]$t
}
qfit[[nm]] = qtcG(p, name=nm, theta=par[[nm]],ym=ym, step=step)
dfit[[nm]] = dtcG(x, name=nm, theta=par[[nm]],ym=ym, step=step)
}
if (plots){
cols=cbind(c(rgb(0,0,1), rgb(1,0,0), rgb(0,1,0), rgb(1,0,1)),
c(rgb(0,0,1,0.5), rgb(1,0,0,0.5), rgb(0,1,0,0.5), rgb(1,0,1,0.5)),
c(rgb(0,0,1,0.1), rgb(1,0,0,0.1), rgb(0,1,0,0.1), rgb(1,0,1,0.1)))
w=which.min(AIC)
nm=name[w]
if (ym.param) ym=par[[nm]][k[[nm]]]
if (!is.null(filename)) png(filename, 1200,600)
par(mfrow=c(1,2))
if (step==0){
hist(y[y>0], breaks=c(0:30)*max(y+.1)/30, freq=FALSE, xlim=range(x), main="Density of y>0",
xlab="Precipitation [mm]", ylab="Density", col="lightgrey", cex.main=1)
lines(x[x>=ym], dfit[[w]][x>=ym]/(1-pnorm(-par[[nm]][1])), col=cols[w,1])
legend("topright", paste("Best AIC tcG model:",nm), text.col=cols[w,1], bty="n")
}else{
tcG.barplot(y,theta=par[[nm]],name=nm,ym=ym,step=step,cols=c(rgb(0,0,0),cols[w,2]), zoom=range(y,na.rm=T))
}
rg=range(y, qfit, q.L, q.U, na.rm=TRUE)
tcG.qqplot(y, names=name, qfit=qfit, q.L=q.L, q.U=q.U, cols=cols, zoomx=rg, zoomy=rg)
if (!is.null(filename)) dev.off()
}
return(list(par=par, fit.boot=fit.boot, AIC=AIC, for.plots=list(dfit=dfit,qfit=qfit,q.L=q.L,q.U=q.U)))
}
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
usethis::use_package("Rdpack")
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
?tcG.fit
?extGP.fit
library(tcG)
?tcG.fit
?extGP.fit
usethis::use_vignette("example")
?tcG.fit
library(tcG)
?tcG.fit
library(tcG)
library(tcG)
?res.plot
browseVignettes("tcG")
browseVignettes(tcG)
load("~/these/MF_Guipavas.RData")
usethis::use_data(R)
library(tcG)
plot(R[1:1000,], type="l")
plot(R[1:10000,], type="l")
guip=R
guip$R=guip$R/10
usethis::use_data(guip)
usethis::use_data(guip)
range(guip$date)
guip$R=round(guip$R/0.2)*0.2
guip=guip[month(guip$date)%in%(10:12),]
library(lubridate)
guip=guip[month(guip$date)%in%(10:12),]
rm(R)
plot(guip[1:10000,], type="l")
sort(unique(guip$R))
res=tcG.fit(guip$R, name="gp", init=list("gp"=c(-1,0.5,0.5,0.5)), ym=0.2, step=0.2, R=50)
# fitted parameters
res$par
sort(unique(guip$R))
res_cont=tcG.fit(guip$R, name="gp", init=list("gp"=c(-1,0.5,0.5,0.5)), ym=0.2, step=0, R=50)
res_cont=tcG.fit(guip$R, name="gp", init=list("gp"=c(-1,0.5,0.5,0.5)), ym=0, step=0, R=50)
res_dis=tcG.fit(guip$R, name="gp", init=list("gp"=c(-1,0.5,0.5,0.5)), ym=0.2, step=0.2, R=50)
# using only October to avoid long calculations
guip=guip[lubridate::month(guip$date)==10,]
plot(guip[1:10000,], type="l")
plot(guip[1:8000,], type="l")
plot(guip[1:7000,], type="l")
sort(unique(guip$R))
res_cont=tcG.fit(guip$R, name="gp", init=list("gp"=c(-1,0.5,0.5,0.5)), ym=0, step=0, R=50)
res_dis=tcG.fit(guip$R, name="gp", init=list("gp"=c(-1,0.5,0.5,0.5)), ym=0.2, step=0.2, R=50)
res=tcG.fit(rain, name=c("power", "gp"),
init=list("power"=c(0,2,2), "gp"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=50)
res=tcG.fit(guip$R, name=c("power", "gp"),
init=list("power"=c(0,2,2), "gp"=c(0,2,0.5,0.5)),
ym=0.3, step=0.1, R=50)
res=tcG.fit(guip$R, name=c("power", "gp"),
init=list("power"=c(-1,.5,.5), "gp"=c(-1,.5,0.5,0.5)),
ym=0.3, step=0.1, R=50)
# parameters
res$par
# AIC
which.min(res$AIC)
res=tcG.fit(guip$R, name=c("power", "gp"),
init=list("power"=c(-1,.5,.5), "gp"=c(-1,.5,0.5,0.5)),
ym=.2, step=.2, R=50)
# parameters
res$par
# AIC
which.min(res$AIC)
res=tcG.fit(guip$R, name=c("power", "gp"),
init=list("power"=c(-1,1,2), "gp"=c(-1,.5,0.5,0.5)),
ym=.2, step=.2, R=50)
# parameters
res$par
# AIC
which.min(res$AIC)
# uniquement sur les mesures positives
res=extGP.fit(guip$R[guip$R>0], init=c(0,2,0.5,0.5), ym=0.3, step=0.1, R=50)
# uniquement sur les mesures positives
res=extGP.fit(guip$R[guip$R>0], init=c(-1,.5,.5,.5), ym=0.2, step=0.2, R=50)
# uniquement sur les mesures positives
res=extGP.fit(guip$R[guip$R>0], init=c(.5,.5,.5), ym=0.2, step=0.2, R=50)
res$par
res_tcG=tcG.fit(guip$R, name="gp", init=list("gp"=c(-1,.5,0.5,0.5)), ym=0.2, step=0.2, R=50, plots=FALSE)
res_eGP=extGP.fit(guip$R[guip$R>0], init=c(.5,0.5,0.5), ym=0.2, step=0.2, R=50, plots=FALSE)
# plot
res.plot(res.tcG=res_tcG, res.extGP=res_eGP, y=guip$R, ym=0.3, step=0.1, choice="qqplot")
# plot
res.plot(res.tcG=res_tcG, res.extGP=res_eGP, y=guip$R, ym=0.2, step=0.2, choice="qqplot")
